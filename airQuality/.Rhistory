head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(12)
abline
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
d
rug
rug(100)
rug(ppm)
hist(ppm, col = "green")
abline(h = 2)
abline(v = 12, lwd= 2)
abline(v = median(ppm), col = "megenta", lwd= 4)
abline(v = median(ppm), col = "magenta", lwd= 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, col = "red")
boxplot(pm25~region, col = "red")
a
a
boxplot(pollution, pm25~region, col = "red")
boxplot(data = pollution, pm25~region, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, "")
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region =="west"), col = "green")
hist(subset(pollution$pm25, region =="west"), col = "green")
hist(subset(pollution, region =="west")$pm25, col = "green")
plot()
plor(pollution)
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$longitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,
| 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(easr$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
#
# Copyright 2017 Data Science Dojo
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This R source code file corresponds to video 9 of the Data Science
# Dojo YouTube series "Introduction to Text Analytics with R" located
# at the following URL:
#     https://www.youtube.com/watch?v=SgrLE6WQzkE
#
# Install all required packages.
# install.packages(c("ggplot2", "e1071", "caret", "quanteda",
#                    "irlba", "randomForest"))
# Load up the .CSV data and explore in RStudio.
spam.raw <- read.csv("C:/Users/siarkmi2/Documents/R/spam.csv", stringsAsFactors = FALSE)
#View(spam.raw)
# Clean up the data frame and view our handiwork.
spam.raw <- spam.raw[, 1:2]
names(spam.raw) <- c("Label", "Text")
#View(spam.raw)
# Check data to see if there are missing values.
length(which(!complete.cases(spam.raw)))
# Convert our class label into a factor.
spam.raw$Label <- as.factor(spam.raw$Label)
# The first step, as always, is to explore the data.
# First, let's take a look at distibution of the class labels (i.e., ham vs. spam).
prop.table(table(spam.raw$Label))
# Next up, let's get a feel for the distribution of text lengths of the SMS
# messages by adding a new feature for the length of each message.
spam.raw$TextLength <- nchar(spam.raw$Text)
summary(spam.raw$TextLength)
# Visualize distribution with ggplot2, adding segmentation for ham/spam.
library(ggplot2)
ggplot(spam.raw, aes(x = TextLength, fill = Label)) +
theme_bw() +
geom_histogram(binwidth = 5) +
labs(y = "Text Count", x = "Length of Text",
title = "Distribution of Text Lengths with Class Labels")
# At a minimum we need to split our data into a training set and a
# test set. In a true project we would want to use a three-way split
# of training, validation, and test.
#
# As we know that our data has non-trivial class imbalance, we'll
# use the mighty caret package to create a randomg train/test split
# that ensures the correct ham/spam class label proportions (i.e.,
# we'll use caret for a random stratified split).
library(caret)
help(package = "caret")
# Use caret to create a 70%/30% stratified split. Set the random
# seed for reproducibility.
set.seed(32984)
indexes <- createDataPartition(spam.raw$Label, times = 1,
p = 0.7, list = FALSE)
train <- spam.raw[indexes,]
test <- spam.raw[-indexes,]
# Verify proportions.
prop.table(table(train$Label))
prop.table(table(test$Label))
# Text analytics requires a lot of data exploration, data pre-processing
# and data wrangling. Let's explore some examples.
# HTML-escaped ampersand character.
train$Text[21]
# HTML-escaped '<' and '>' characters. Also note that Mallika Sherawat
# is an actual person, but we will ignore the implications of this for
# this introductory tutorial.
train$Text[38]
# A URL.
train$Text[357]
# There are many packages in the R ecosystem for performing text
# analytics. One of the newer packages in quanteda. The quanteda
# package has many useful functions for quickly and easily working
# with text data.
library(Matrix)
library(quanteda)
help(package = "quanteda")
# Tokenize SMS text messages.
train.tokens <- tokens(train$Text, what = "word",
remove_numbers = TRUE, remove_punct = TRUE,
remove_symbols = TRUE, remove_hyphens = TRUE)
# Take a look at a specific SMS message and see how it transforms.
train.tokens[[357]]
# Lower case the tokens.
train.tokens <- tokens_tolower(train.tokens)
train.tokens[[357]]
# Use quanteda's built-in stopword list for English.
# NOTE - You should always inspect stopword lists for applicability to
#        your problem/domain.
train.tokens <- tokens_select(train.tokens, stopwords(),
selection = "remove")
train.tokens[[357]]
# Perform stemming on the tokens.
train.tokens <- tokens_wordstem(train.tokens, language = "english")
train.tokens[[357]]
train.tokens.dfm <- dfm(train.tokens, tolower = FALSE)
train.tokens.matrix <- as.matrix(train.tokens.dfm)
View(train.tokens.matrix[1:20, 1:100])
require(devtools)
library(devtools)
devtools::install_github('topepo/caret/pkg/caret')
require(devtools)
library(devtools)
install.packages("devtools")
devtools::install_github('topepo/caret/pkg/caret')
?tokens_wordstem
?tokens_wordstem
library(quanteda)
?tokens_wordstem
setwd("C:/Users/siarkmi2/Documents/GitHub/Cursera/airQuality")
NEI.raw <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- NEI.raw
head(NEI)
head(SCC)
NEI$Pollutant <- as.factor(NEI$Pollutant)
summary(NEI$Pollutant)
library(data.table)
NEI.raw <- data.table(NEI.raw)
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
NEI <- NEI.raw[fips == "24510"]
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
library(ggplot2)
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = .(year, type) ]
NEI.sum
fit1 <- lm (V1 ~ year+ type, data = NEI.sum)
ggplot(NEI.sum, aes(year , V1, color = type)) +
geom_line()+
geom_smooth(method='lm', span = 0.1, level=0.20)+
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
NEI.raw
SCC <- data.table(SCC)
SCC
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalCombustion <- (combustionRelated & coalRelated)
SCC.sub <- SCC[ coalCombustion]
NEI.sub <- NEI.raw[NEI.raw$SCC %in% SCC.sub$SCC]
NEI.sum <- NEI.sub[, sum(Emissions), by = year]
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" Emissions from coal combustion-related sources"))
NEI.sum <- NEI.raw[fips == '24510' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" emissions from motor vehicle sources"))
NEI.sum.B <- NEI.raw[fips == '24510' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum.C <- NEI.raw[fips == '06037' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum.C$City <- "California"
NEI.sum
NEI.sum.B$City <- "BaltimoreCity"
NEI.sum <- rbind(NEI.sum.B, NEI.sum.C)
png('~/Exploratory_Data_Analysis/Assignment_2/plot6.png')
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
facet_grid(. ~ City)+
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" emissions from motor vehicle sources"))
ggsave("mtcars.png")
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
ggsave("plot1.png")
png("plot1.png")
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
png("plot2.png")
NEI <- NEI.raw[fips == "24510"]
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
NEI <- NEI.raw[fips == "24510"]
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
NEI <- NEI.raw[fips == "24510"]
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
NEI.sum <- NEI[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
png("plot2.png")
NEI <- NEI.raw[fips == "24510"]
png("plot2.png")
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
png("plot1.png")
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
png("plot2.png")
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
NEI.raw <- data.table(NEI.raw)
library(data.table)
NEI.raw <- data.table(NEI.raw)
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
png("plot1.png")
NEI.sum <- NEI.raw[, sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5"
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
png("plot2.png")
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = year]
plot(NEI.sum$year, NEI.sum$V1,
type = "l",
col = "3",
lwd = "2",
xlab = "Year",
ylab = "Amount of PM2.5 emitted, in tons",
main = "Total emissions from PM2.5 in the Baltimore City, Maryland "
)
fit1 <- lm (V1 ~ year, data = NEI.sum)
abline(fit1, lty = "dashed")
dev.off()
library(ggplot2)
NEI.sum <- NEI.raw[fips == "24510", sum(Emissions), by = .(year, type) ]
NEI.sum
fit1 <- lm (V1 ~ year+ type, data = NEI.sum)
ggplot(NEI.sum, aes(year , V1, color = type)) +
geom_line()+
geom_smooth(method='lm', span = 0.1, level=0.20)+
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
ggsave("plot3.png")
NEI.raw
SCC <- data.table(SCC)
SCC
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalCombustion <- (combustionRelated & coalRelated)
SCC.sub <- SCC[ coalCombustion]
NEI.sub <- NEI.raw[NEI.raw$SCC %in% SCC.sub$SCC]
NEI.sum <- NEI.sub[, sum(Emissions), by = year]
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" Emissions from coal combustion-related sources"))
ggsave("plot4.png")
NEI.sum <- NEI.raw[fips == '24510' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" emissions from motor vehicle sources"))
ggsave("plot5.png")
NEI.sum.B <- NEI.raw[fips == '24510' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum.C <- NEI.raw[fips == '06037' & type == 'ON-ROAD', sum(Emissions), by = year]
NEI.sum.B$City <- "BaltimoreCity"
NEI.sum.C$City <- "California"
NEI.sum <- rbind(NEI.sum.B, NEI.sum.C)
NEI.sum
ggplot(NEI.sum, aes(factor(year), V1, fill=factor(year)))+
geom_bar(stat = "identity")+
guides(fill=FALSE)+ # remove legend
facet_grid(. ~ City)+
labs(x="Year", y=expression("Total PM"[2.5]*" Emission (Tons)"))+
labs(title=expression("PM"[2.5]*" emissions from motor vehicle sources"))
ggsave("plot6.png")
swirl
library(swirl)
swirl()

# the doSNOW package to allow for multi-core training in parallel.
#
# WARNING - The following code is configured to run on a workstation-
#           or server-class machine (i.e., 12 logical cores). Alter
#           code to suit your HW environment.
#
#install.packages("doSNOW")
library(doSNOW)
# Time the code execution
start.time <- Sys.time()
# Create a cluster to work on 10 logical cores.
cl <- makeCluster(10, type = "SOCK")
registerDoSNOW(cl)
# As our data is non-trivial in size at this point, use a single decision
# tree alogrithm as our first model. We will graduate to using more
# powerful algorithms later when we perform feature extraction to shrink
# the size of our data.
rpart.cv.1 <- train(Label ~ ., data = train.tokens.df, method = "rpart",
trControl = cv.cntrl, tuneLength = 7)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE)
View(slownik)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8")
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8")
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE)
View(slownik)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8"  )
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8"  )
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8"  )
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE )
View(slownik)
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE )
View(slownik)
?read.table
slownik <- read.csv2("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding =  )
slownik <- read.csv2(file="C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding =  )
slownik <- read.csv2("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.file("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
csv
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.delim("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.table("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE, fileEncoding = "UTF-8" )
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE )
View(slownik)
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE,
fileEncoding = "UTF-8")
slownik <- read.csv("C:/Users/siarkmi2/Documents/R/polimorfologik-2.1.txt",
header=F, sep=";", stringsAsFactors=FALSE
)
View(slownik)
stopwordsPL <- readLines("C:/Users/siarkmi2/Documents/GitHub/stopwords/polish.stopwords.txt"
, encoding = "UTF-8")
?tokens_wordstem()
View(slownik)
class(slownik)
swirl()
library(swirl)
swirl()
sample()
?sample
sample(1:6,4,replace = T)
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS()
?LETTERS
letters()
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
flips <- sample(0:1,100, prob = c(0.3,0.7))
flips <- sample(0:1,100, prob = c(0.3,0.7), replace = T)
flips <- sample(0:1,100, prob = c(0.3,0.7), replace = TRUE)
flips <- sample(c(0,1),100, prob = c(0.3,0.7), replace = TRUE)
flips
sum(flips)
?rbinorm
?rbinorm
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(1,n =100, size=1, prob = 0.7)
flips2 <- rbinom(n =100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnrm
?rnorm
rnnorm(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean=10
?
)
rpois(5, mean=10)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- calMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
plot()
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
?plot
plot(y=cars$speed, x=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle", col =2)
plot(cars, col =2)
plot(cars, xlim = c(10, 15))
plot(cars, pch =2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:/Users/siarkmi2/Documents/GitHub/Cursera/HospitalQuality")
# Loading data
Hosp.raw <- read.csv("hospital-data.csv", stringsAsFactors = FALSE)
View(Hosp.raw)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
View(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
## You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
myOutcome <-"heart attack"
MyState <- "TX"
colSel <- 11
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
Hosp.sort
myOutcome <-"heart failure"
MyState <- "TX"
colSel <- 11
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
Hosp.sort
myOutcome <-"heart failure"
MyState <- "TX"
colSel <- 11
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
MyState <- "TX"
colSel <- 17
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp.sort <- Hosp[order(Hosp[3], Hosp[2]),]
head(Hosp.sort)
head(100, Hosp.sort)
Hosp.sort
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack<-as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
head(outcome)
View(outcome)
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[3], Hosp[2]),]
head(Hosp.sort)
Hosp.sort
Hosp.sort <- complete.cases(Hosp)
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp.sort
Hosp <- complete.cases(Hosp)
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
Hosp
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp[!complete.cases(Hosp),]
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp[!complete.cases(Hosp),]
Hosp
Hosp <- Hosp[!complete.cases(Hosp),]
hosp
Hosp
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp <- Hosp[complete.cases(Hosp),]
Hosp
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp <- subset(outcome, State == MyState, select = c(State, Hospital.Name, colSel))
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp <- Hosp[complete.cases(Hosp),]
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
head(Hosp.sort)
Hosp.sort
Hosp.ret <- Hosp.sort[1,1]
return(Hosp.ret)
Hosp.ret
Hosp.ret <- Hosp.sort[1,4]
Hosp.ret
Hosp.ret <- Hosp.sort[4,1]
Hosp.ret
Hosp.ret <- Hosp.sort[myNum,1]
Hosp.ret
Hosp.ret <- Hosp.sort[myNum,1]
Hosp.ret <- Hosp.sort[myNum,1]
myNum <- 5
Hosp.ret <- Hosp.sort[myNum,1]
Hosp.ret
a <- Hosp.sort[NROW(Hosp.sort)]
a <- Hosp.sort[NROW(Hosp.sort$1)]
NROW(Hosp.sort)
a <- NROW(Hosp.sort)
myNum <- NROW(Hosp.sort)
Hosp.ret <- Hosp.sort[myNum,1]
Hosp.ret
Hosp.sort
num <- 5
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
Hosp <- Hosp[complete.cases(Hosp),]
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
if(num == "worst") {myNum <- NROW(Hosp.sort)}
else if (num=="best") {myNum <- 1}
else {myNum <- num}
if(num == "worst") {myNum <- NROW(Hosp.sort)
} else if (num=="best") {myNum <- 1}
else {myNum <- num}
if(num == "worst") {myNum <- NROW(Hosp.sort)
} else if (num=="best") {myNum <- 1
} else {myNum <- num}
if(num == "worst") {myNum <- NROW(Hosp.sort)
} else if (num=="best") {myNum <- 1
} else {myNum <- num
}
Hosp.ret <- Hosp.sort[myNum,1]
Hosp.ret
rankhospital <- function(state, outcome, num = "best") {
# IF for choosing columns
myOutcome <-Outcome
MyState <-state
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
## TMP
MyState <- "TX"
colSel <- 17
num <- 5
## Read outcome data
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
Hosp <- Hosp[complete.cases(Hosp),]
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
Hosp.ret <- Hosp.sort[myNum,1]
return(Hosp.ret)
## 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital <- function(state, Outcome, num = "best") {
# IF for choosing columns
myOutcome <-Outcome
MyState <-state
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
## TMP
MyState <- "TX"
colSel <- 17
num <- 5
## Read outcome data
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
Hosp <- Hosp[complete.cases(Hosp),]
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
Hosp.ret <- Hosp.sort[myNum,1]
return(Hosp.ret)
## 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, Outcome, num = "best") {
# IF for choosing columns
myOutcome <-Outcome
MyState <-state
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
## Read outcome data
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
Hosp <- Hosp[complete.cases(Hosp),]
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
Hosp.ret <- Hosp.sort[myNum,1]
return(Hosp.ret)
## 30-day death rate
}
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
"DETAR HOSPITAL NAVARRO"
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
best <- function(state, Outcome) {
# IF for choosing columns
myOutcome <-Outcome
MyState <-state
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
## Read outcome data
Hosp <- subset(outcome, State == MyState, select = c(Hospital.Name, colSel))
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death rate
Hosp.sort <- Hosp[order(Hosp[2], Hosp[1]),]
Hosp.ret <- Hosp.sort[1,1]
return(Hosp.ret)
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
Hosp <- subset(outcome, select = c(State, Hospital.Name, colSel))
sorted <- Hosp %>%
arrange(State, Hosp[3], Hosp[2] ) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
require(dplyr)
sorted <- Hosp %>%
arrange(State, Hosp[3], Hosp[2] ) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
Hosp.sort <- Hosp %>%
arrange(State, Hosp[3], Hosp[2] ) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
s
Hosp.ret <- Hosp.sort[myNum,1]
return(Hosp.ret)
Hosp.ret
Hosp.sort
Hosp.ret <- Hosp.sort[rank=myNum]
Hosp.ret <- Hosp.sort[rank=4]
Hosp.ret <- Hosp.sort[ which(Hosp.sort$rank=myNum), ]
Hosp.ret <- Hosp.sort[ which(Hosp.sort$rank==myNum), ]
Hosp.sort
Hosp.ret
rankall <- function(outcome, num = "best") {
# IF for choosing columns
myOutcome <-Outcome
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
require(dplyr)
## Read outcome data
Hosp <- subset(outcome, select = c(State, Hospital.Name, colSel))
## Check that state and outcome are valid
Hosp.sort <- Hosp %>%
arrange(State, Hosp[3], Hosp[2] ) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
Hosp.ret <- Hosp.sort[ which(Hosp.sort$rank==myNum), ]
return(Hosp.ret)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
##########3
rankall <- function(Outcome, num = "best") {
# IF for choosing columns
myOutcome <-Outcome
colSel <- ""
if(myOutcome == "heart attack")         {colSel <- 11
} else if(myOutcome == "heart failure") {colSel <- 17
} else if(myOutcome == "pneumonia")     {colSel <- 23
}
require(dplyr)
## Read outcome data
Hosp <- subset(outcome, select = c(State, Hospital.Name, colSel))
## Check that state and outcome are valid
Hosp.sort <- Hosp %>%
arrange(State, Hosp[3], Hosp[2] ) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
if(num == "worst") {myNum <- NROW(Hosp.sort) #last
} else if (num=="best") {myNum <- 1          #first
} else {myNum <- num                         #declared
}
Hosp.ret <- Hosp.sort[ which(Hosp.sort$rank==myNum), ]
return(Hosp.ret)
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
}
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankhospital("NY", "heart attack", 7)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, State == "HI")$hospital)
as.character(subset(r, State == "HI")$Hosptal.Name)
as.character(subset(r, State == "HI"))
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
as.character(subset(r, State == "HI"))
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ"))
as.character(subset(r, State == "NJ"))
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
as.character(subset(r, State == "NV"))
